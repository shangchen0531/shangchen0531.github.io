{"version":3,"sources":["reportWebVitals.js","my_app/modules/SideBar.js","my_app/imgs/adds.svg","my_app/modules/context/MyContext.js","my_app/modules/Uploader.js","my_app/modules/AliTableColMultiSelect.js","my_app/modules/AliTable.js","my_app/modules/DataAnalysis.js","my_app/MyApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SideBar","props","state","data","className","this","map","item","to","path","activeClassName","title","React","Component","MyContext","createContext","Uploader","history","useHistory","uploadDiv","useRef","context","useContext","showAlert","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","workbook","XLSX","read","type","excelRows","SheetNames","forEach","sname","index","json_excel_data","utils","sheet_to_json","Sheets","header","shift","console","log","concat","onerror","readAsBinaryString","maxLength","midLength","row","length","Math","max","push","setColHidden","setRowChosen","setSettledData","setPrimitive","replace","catch","err","useEffect","dragenter","stopPropagation","preventDefault","dragover","drop","filesArray","dataTransfer","files","i","dropzone","current","addEventListener","removeEventListener","ref","onClick","fileElem","document","getElementById","click","src","adds","alt","id","onChange","handleFiles","AliTableMultiSelect","cols","columns","defaultChecked","hidden","preState","nowArray","style","paddingLeft","name","color","fontWeight","AliTable","col_hidden","row_chosen","primitiveData","hasTableOption","undefined","useState","defaultRow","setDefaultRow","dvalue","dataS","primitiveData2","res","dataSource","arr","cellData","code","d","j","convertTableData","pipeline","useTablePipeline","components","Checkbox","input","primaryKey","use","features","multiSelect","highlightRowWhenSelected","defaultValue","checkboxPlacement","checkboxColumn","lock","clickArea","nextValue","key","keys","action","s","parseInt","placement","shape","icon","BarChartOutlined","colHidden","rowChosen","original_data","isValue","isNaN","Number","res_data","mes","nanArr","idx1","oldValue","newValue","newTitle","dealingTitle","titleMap","Map","set","has","get","dealData","getProps","defaultColumnWidth","DataAnalysis","settledData","echartsRef","option","text","legend","formatter","pos","indexOf","a","toFixed","padding","dataset","source","xAxis","alignWithLabel","yAxis","gridIndex","tooltip","showContent","trigger","axisPointer","backgroundColor","borderColor","borderWidth","textStyle","toolbox","show","feature","dataZoom","yAxisIndex","zoom","back","dataView","lang","readOnly","magicType","bar","line","stack","tiled","smooth","emphasis","focus","saveAsImage","series","getEchartsInstance","setOption","echarts","height","width","component","MyApp","origin_alert_left","alertMes","setAlertMes","alertLeft","setAlertLeft","alertType","setAlertType","alertOpacity","setAlertOpacity","message","showIcon","left","opacity","basename","Provider","value","setTimeout","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c1f6c7a7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport {\r\n    NavLink,\r\n} from 'react-router-dom'\r\n\r\nclass SideBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: this.props.data,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <aside className=\"side-bar\">\r\n                <header>\r\n                    <span>个人数据分析</span>\r\n                </header>\r\n                <nav>\r\n                    <ul className=\"side-nav\">\r\n                        {this.state.data.map(\r\n                            (item) =>\r\n                                <NavLink\r\n                                    key={item.title}\r\n                                    to={item.path}\r\n                                    activeClassName=\"side-item-hover\">\r\n                                    <li className=\"side-item\">{item.title}</li>\r\n                                </NavLink>\r\n                        )}\r\n                    </ul>\r\n                </nav>\r\n                <footer>\r\n                    <span>可以上传小型表格进行分析</span>\r\n                </footer>\r\n            </aside>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideBar;","export default __webpack_public_path__ + \"static/media/adds.451e3f86.svg\";","import React from 'react';\r\n\r\nconst MyContext = React.createContext();\r\n\r\nexport { MyContext };","import { useContext, useEffect, useRef } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport adds from '../imgs/adds.svg';\r\nimport { MyContext } from './context/MyContext';\r\nimport XLSX from 'xlsx';\r\n\r\nfunction Uploader() {\r\n    let history = useHistory();\r\n    const uploadDiv = useRef(null);\r\n\r\n    const context = useContext(MyContext);\r\n    const showAlert = context.showAlert;\r\n\r\n    function readFile(file) {\r\n        // expriments(file);\r\n\r\n        let p1 = new Promise(function (resolve, reject) {\r\n            let reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                let data = e.target.result;\r\n                let workbook = XLSX.read(data, { type: 'binary' });\r\n                let excelRows = [];\r\n                workbook.SheetNames.forEach((sname, index) => {\r\n                    let json_excel_data = \r\n                    XLSX.utils.sheet_to_json(workbook.Sheets[sname], { header: 1 });\r\n                    if (index !== 0) {\r\n                        json_excel_data.shift();\r\n                        // console.log(\"移除了第一行数据, \", index);\r\n                    }\r\n                    console.log(json_excel_data);\r\n                    excelRows = excelRows.concat(json_excel_data);\r\n                });\r\n                \r\n                resolve(excelRows);\r\n            };\r\n            reader.onerror = () => {\r\n                reject(\"读取失败\");\r\n            };\r\n            reader.readAsBinaryString(file);\r\n        });\r\n\r\n        p1.then(excelRows => {\r\n            let maxLength = -1;\r\n            let midLength = -1;\r\n            excelRows.forEach(row => {\r\n                midLength = row.length;\r\n                maxLength = Math.max(midLength, maxLength);\r\n            });\r\n\r\n            excelRows.forEach(row => {\r\n                while (row.length < maxLength) {\r\n                    // console.log(row);\r\n                    row.push(\"\");\r\n                }\r\n            });\r\n            context.setColHidden([]);\r\n            context.setRowChosen([]);\r\n            context.setSettledData([]);\r\n            context.setPrimitive(excelRows);\r\n            console.log(\"表格数据: \", excelRows);\r\n            showAlert(\"读取数据完毕\", \"success\");\r\n            history.replace('/ali-table');\r\n        })\r\n            .catch(err => {\r\n\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    function handleFiles(files) {\r\n        console.log(files);\r\n        for (let i = 0; i < files.length; i++) {\r\n            readFile(files[i]);\r\n            break; // 先实现单文件操作\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        function dragenter(e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }\r\n\r\n        function dragover(e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }\r\n\r\n        function drop(e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n\r\n            const filesArray = e.dataTransfer.files;\r\n            for (let i = 0; i < filesArray.length; i++) {\r\n                readFile(filesArray[i]);\r\n                break; // 先处理单文件的情况;\r\n            }\r\n        }\r\n\r\n        const dropzone = uploadDiv.current;\r\n\r\n        dropzone.addEventListener('dragenter', dragenter);\r\n        dropzone.addEventListener('dragover', dragover);\r\n        dropzone.addEventListener('drop', drop);\r\n\r\n        return () => {\r\n            dropzone.removeEventListener('dragenter', dragenter);\r\n            dropzone.removeEventListener('dragover', dragover);\r\n            dropzone.removeEventListener('drop', drop);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"uploader\"\r\n            ref={uploadDiv}\r\n            onClick={\r\n                () => {\r\n                    // sendFile(null);\r\n                    const fileElem = document.getElementById(\"fileInput\");\r\n                    if (fileElem) {\r\n                        fileElem.click();\r\n                    }\r\n                }\r\n            }>\r\n            <div className=\"uploader-content\">\r\n                <span >上传你的文件, 可拖曳文件到此(仅支持.xls, .xlsx, .csv)</span>\r\n                <img src={adds} alt=\"adds\" className=\"add_icon\" />\r\n            </div>\r\n            <input type=\"file\" id=\"fileInput\"\r\n                onChange={(e) => handleFiles(e.target.files)} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Uploader;","import { Checkbox } from 'antd';\r\n\r\nfunction AliTableMultiSelect(props) {\r\n    const cols = props.columns;\r\n    const setColHidden = props.setColHidden;\r\n\r\n    return (\r\n        <div\r\n            className=\"alitable_multisele_cols\">\r\n            {cols.map((item, index) => {\r\n                // console.log(\"this is AliMultiSele\", item, index);\r\n                return (\r\n                    <div\r\n                        className=\"alitable_multisele_cols_cell\"\r\n                        key={index}>\r\n                        <div>\r\n                            <Checkbox\r\n                                defaultChecked={item.hidden}\r\n                                onChange={() => {\r\n                                    setColHidden(preState => {\r\n                                        let nowArray = [...preState];\r\n                                        nowArray[index] = 1 - nowArray[index];\r\n                                        return nowArray;\r\n                                    });\r\n                                }} />\r\n                        </div>\r\n                        <div style={{ paddingLeft: 5 }}>{item.name === \"\" ? \"(无标题)\" : item.name}</div>\r\n                    </div>\r\n                );\r\n            })}\r\n            {cols.length > 0 \r\n            ?\r\n                <span style={{ color: 'hsl(12, 100%, 65%)', fontWeight: 'bold' }}>\r\n                    选中的行和列将不进行数据处理\r\n                </span>\r\n            : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AliTableMultiSelect;","import { useContext, useEffect, useState } from 'react';\r\nimport { BaseTable, features, useTablePipeline } from 'ali-react-table';\r\nimport { MyContext } from './context/MyContext';\r\nimport {\r\n    BarChartOutlined\r\n} from '@ant-design/icons';\r\nimport { Checkbox, Button, Tooltip } from 'antd';\r\nimport AliTableMultiSelect from './AliTableColMultiSelect';\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction AliTable() {\r\n\r\n    const context = useContext(MyContext);\r\n    const {\r\n        showAlert, setSettledData,\r\n        col_hidden, setColHidden,\r\n        row_chosen, setRowChosen,\r\n        primitiveData,\r\n    } = context;\r\n    const hasTableOption = primitiveData !== undefined;\r\n    const [defaultRow, setDefaultRow] = useState([]);\r\n\r\n    /* eslint-disable */\r\n    useEffect(() => {\r\n        if (hasTableOption) {\r\n            if (col_hidden.length === 0 || row_chosen.length === 0) {\r\n                setColHidden(primitiveData[0].map(() => 0));\r\n                setRowChosen(primitiveData.map(() => 0));\r\n            }\r\n\r\n        } else {\r\n            setColHidden([]);\r\n            setRowChosen([]);\r\n        }\r\n    }, [hasTableOption]);\r\n\r\n    useEffect(() => {\r\n        let dvalue = [];\r\n        row_chosen.forEach((item, index) => {\r\n            if (item === 1) {\r\n                dvalue.push(index + \"\");\r\n            }\r\n        });\r\n        setDefaultRow(dvalue);\r\n        console.log(\"默认行： \", dvalue);\r\n    }, [row_chosen]);\r\n    /* eslint-disable */\r\n\r\n    const history = useHistory();\r\n\r\n    function convertTableData(data) {\r\n\r\n        let res = {\r\n            dataSource: [],\r\n            columns: []\r\n        };\r\n\r\n        if (data === undefined)\r\n            return res;\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n            let arr = data[i];\r\n            // console.log(arr);\r\n            if (i === 0) {\r\n                arr.forEach((cellData, index) => {\r\n                    res.columns.push({\r\n                        name: cellData === \"\" ? \"(无标题)\" : cellData,\r\n                        code: 'col' + index,\r\n                        hidden: col_hidden[index] === 1\r\n                    });\r\n                });\r\n            } else {\r\n                let d = {};\r\n                for (let j = 0; j < arr.length; j++) {\r\n                    d[\"col\" + j] = arr[j] === undefined ? null : arr[j];\r\n                }\r\n                res.dataSource.push(d);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function dealData() {\r\n\r\n        const colHidden = col_hidden;\r\n\r\n        // 可选的行比原数据少一行，所以下标 + 1才是对应的选中行\r\n        const rowChosen = row_chosen;\r\n        const original_data = primitiveData;\r\n\r\n        function isValue(item) {\r\n            let type = typeof item\r\n            return (type === \"number\") || (type === \"string\" && !isNaN(Number(item)));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (original_data === undefined) {\r\n                reject({ mes: \"没有数据\", type: \"error\" });\r\n                return;\r\n            }\r\n\r\n            // 先把行筛除\r\n            let res_data = [];\r\n            original_data.forEach((item, index) => {\r\n                if (index === 0 || rowChosen[index - 1] === 0) {\r\n                    // 没有被选中, 放入结果集\r\n                    let arr = [];\r\n                    for (let j = 0; j < item.length; j++) {\r\n                        if (colHidden[j] === 0) {\r\n                            // 列没有隐藏， 放入结果集\r\n                            arr.push(item[j]);\r\n                        }\r\n                    }\r\n                    res_data.push(arr);\r\n                }\r\n            });\r\n\r\n            if (res_data.length <= 1) {\r\n                reject({ mes: \"合法数据过少，需要一列非数值数据与至少一行记录\", type: \"warning\" });\r\n                return;\r\n            }\r\n\r\n            // 第一行默认不管，由于第一列可能是数据，即x轴标识在其他列，需要对数据进行整理。\r\n            // 默认每列数据从第二行开始均一致，检查第二行的数据情况即可。\r\n            let nanArr = [];\r\n            let arr = res_data[1];\r\n            for (let j = 0; j < arr.length; j++) {\r\n                if (isValue(arr[j])) {\r\n                    // 数据\r\n                    continue;\r\n                } else {\r\n                    // 非数据\r\n                    nanArr.push(j);\r\n                    if (nanArr.length > 1) {\r\n                        // 找到两列非数据\r\n                        reject({ mes: \"存在两列以上非数据\", type: \"warning\" });\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let idx1 = nanArr[0];\r\n            if (idx1 !== 0) {\r\n                // 找到两列互换\r\n                res_data.forEach((item) => {\r\n                    [item[idx1], item[0]] = [item[0], item[idx1]];\r\n                });\r\n            }\r\n\r\n            // 优化表头，相同系列名在后面加上数字标识\r\n            let titleMap = new Map();\r\n            titleMap.set(\"无标题\", 0);\r\n            let arr2 = res_data[0];\r\n            let oldValue, newValue, newTitle, dealingTitle;\r\n            arr2.forEach((item, index) => {\r\n                dealingTitle = item === \"\" ? \"无标题\" : item;\r\n                if (titleMap.has(dealingTitle)) {\r\n                    oldValue = titleMap.get(dealingTitle);\r\n                    newValue = oldValue + 1;\r\n                    titleMap.set(dealingTitle, newValue);\r\n                    newTitle = dealingTitle + newValue;\r\n                    res_data[0][index] = newTitle;\r\n                } else {\r\n                    titleMap.set(dealingTitle, 0);\r\n                }\r\n            });\r\n            // console.log(\"处理后的表头：\", res_data[0]);\r\n            resolve(res_data);\r\n        });\r\n    }\r\n\r\n    const primitiveData2 = convertTableData(primitiveData);\r\n    let dataS, cols;\r\n    dataS = hasTableOption ? primitiveData2.dataSource : [];\r\n    cols = hasTableOption ? primitiveData2.columns : [];\r\n\r\n    const pipeline = useTablePipeline({ components: { Checkbox } })\r\n        .input({ dataSource: dataS, columns: cols })\r\n        .primaryKey('id')\r\n        .use(\r\n            features.multiSelect({\r\n                highlightRowWhenSelected: true,\r\n                defaultValue: defaultRow,\r\n                checkboxPlacement: 'start',\r\n                checkboxColumn: { lock: true },\r\n                clickArea: 'cell',\r\n                onChange: (nextValue, key, keys, action) => {\r\n                    let s = 0;\r\n                    let nowArray;\r\n                    if (action === 'check-all' || action === 'uncheck-all') {\r\n                        s = action === 'check-all' ? 1 : 0;\r\n                        setRowChosen(preState => {\r\n                            nowArray = preState.map(() => s);\r\n                            return nowArray;\r\n                        });\r\n                    } else {\r\n                        setRowChosen(preState => {\r\n                            nowArray = preState.map(() => 0);\r\n                            nextValue.forEach((item) => {\r\n                                nowArray[parseInt(item)] = 1;\r\n                            });\r\n                            console.log(nowArray);\r\n                            return nowArray;\r\n                        });\r\n                    }\r\n                }\r\n            }),\r\n        );\r\n\r\n\r\n    return (\r\n        <div className=\"table_container\">\r\n            <Tooltip title=\"分析数据\" placement=\"bottom\">\r\n                <Button\r\n                    type=\"ghost\"\r\n                    shape=\"circle\"\r\n                    icon={<BarChartOutlined />}\r\n                    className=\"ali_table_send_button\"\r\n                    onClick={(e) => {\r\n                        dealData().then(res_data => {\r\n                            // showAlert(\"整理完毕\", \"success\");\r\n                            setSettledData(res_data);\r\n                            console.log(\"整理后: \", res_data);\r\n                            history.replace(\"/data\");\r\n                        }).catch(err => {\r\n                            showAlert(err.mes, err.type);\r\n                        });\r\n                    }} />\r\n            </Tooltip>\r\n\r\n            <AliTableMultiSelect\r\n                className=\"ali_table_colmulsele_bar\"\r\n                columns={cols}\r\n                colHidden={col_hidden}\r\n                setColHidden={setColHidden} />\r\n            <BaseTable\r\n                className=\"ali_table\" {...pipeline.getProps()}\r\n                defaultColumnWidth={50}\r\n            // stickyTop={'8vh'}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AliTable;","import { useContext, useEffect, useRef } from 'react';\r\nimport { MyContext } from './context/MyContext';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport * as echarts from 'echarts';\r\n\r\nfunction DataAnalysis() {\r\n\r\n    const {\r\n        settledData,\r\n    } = useContext(MyContext);\r\n\r\n    let echartsRef = useRef(null);\r\n    const echartsType = 'bar';\r\n\r\n    let option =\r\n    {\r\n        title: {\r\n            text: settledData.length > 0 ? `${settledData.length - 1}项` : \"\",\r\n        },\r\n        legend: {\r\n            // 图例滚动显示\r\n            type: 'scroll',\r\n            formatter: function (name) {\r\n                if(settledData.length > 0) {\r\n                    let pos = settledData[0].indexOf(name)\r\n                    let a = 0;\r\n                    let length = settledData.length\r\n                    for (let i = 1; i < length; i++) {\r\n                        a += settledData[i][pos];\r\n                    }\r\n                    return name + `\\n均: ${(a / (length - 1)).toFixed(2)}`;\r\n                }\r\n                return name;\r\n            },\r\n            padding: 10,\r\n        },\r\n        dataset: {\r\n            // 提供一份数据。\r\n            source: []\r\n        },\r\n        // 声明一个 X 轴，类目轴（category）。默认情况下，类目轴对应到 dataset 第一列。\r\n        xAxis: {\r\n            // 类目轴\r\n            type: 'category',\r\n            // 标签居中\r\n            alignWithLabel: true,\r\n        },\r\n        // 声明一个 Y 轴，数值轴。\r\n        yAxis: { gridIndex: 0 },\r\n        // grid: { top: '50%' },\r\n\r\n        tooltip: {\r\n            // 提示框交叉显示，默认会识别坐标轴\r\n            showContent: true,\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n                type: 'cross',\r\n            },\r\n            backgroundColor: 'rgba(50,50,50,0.7)',\r\n            borderColor: '#333',\r\n            borderWidth: 0,\r\n            textStyle: {\r\n                color: '#fff',\r\n                fontWeight: 'normal',\r\n            }\r\n        },\r\n        toolbox: {\r\n            // 工具栏配置\r\n            show: settledData.length > 0,\r\n            feature: {\r\n                // 数据缩放\r\n                dataZoom: {\r\n                    yAxisIndex: \"none\",\r\n                    title: {\r\n                        zoom: \"区域缩放\",\r\n                        back: \"区域缩放还原\"\r\n                    }\r\n                },\r\n                // 查看原始数据\r\n                dataView: {\r\n                    lang: ['数据视图', '关闭', '刷新'],\r\n                    readOnly: false\r\n                },\r\n                // 类型转换\r\n                magicType: {\r\n                    type: [\"bar\", \"line\", \"stack\"],\r\n                    // 图标题目\r\n                    title: {\r\n                        bar: '切换为柱状图',\r\n                        line: '切换为折线图',\r\n                        stack: '切换为堆叠',\r\n                        tiled: '切换为平铺'\r\n                    },\r\n                    // 系列option配置\r\n                    option: {\r\n                        line: {\r\n                            smooth: true,\r\n                            emphasis: {\r\n                                focus: 'series',\r\n                            }\r\n                        },\r\n                        bar: {\r\n                            emphasis: {\r\n                                focus: 'series',\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                // 保存图片\r\n                saveAsImage: {\r\n                    title: \"保存为图片\",\r\n                }\r\n            },\r\n        },\r\n        // 声明多个 bar 系列，默认情况下，每个系列会自动对应到 dataset 的每一列。\r\n        series: [],\r\n        // 动画时长\r\n        // animationDuration: 800,\r\n    };\r\n\r\n    useEffect(() => {\r\n        // console.log(\"data刷新\");\r\n        // let pieOption = {\r\n        //     type: 'pie',\r\n        //     id: 'pie',\r\n        //     radius: '30%',\r\n        //     center: ['50%', '25%'],\r\n        //     emphasis: { focus: 'data' },\r\n        //     label: {\r\n        //         formatter: '{b}:\\n{@1} ({d}%)'\r\n        //     },\r\n        //     seriesLayoutBy: 'row',\r\n        //     encode: {\r\n        //         itemName: 0,\r\n        //         value: 1,\r\n        //         tooltip: 1\r\n        //     }\r\n        // };\r\n        let series = [];\r\n        if (settledData.length > 1) {\r\n            for (let i = 1; i < settledData[0].length; i++) {\r\n                // 初始图例配置\r\n                series.push({\r\n                    type: echartsType,\r\n                    // 高亮全部图例\r\n                    emphasis: {\r\n                        focus: 'series',\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        echartsRef.getEchartsInstance().setOption({\r\n            dataset: {\r\n                source: settledData\r\n            },\r\n            toolbox: {\r\n                show: settledData.length > 0,\r\n            },\r\n            series: series\r\n        });\r\n    });\r\n\r\n    // const onEvent = {\r\n    //     'updateAxisPointer': (event) => {\r\n    //         // console.log(echartIns);\r\n    //         let xAxisInfo = event.axesInfo[0];\r\n    //         if (xAxisInfo) {\r\n    //             let dimension = xAxisInfo.value + 1;\r\n    //             const title = settledData[dimension][0];\r\n    //             echartIns.setOption({\r\n    //                 title: {\r\n    //                     text: title\r\n    //                 },\r\n    //                 series: {\r\n    //                     id: 'pie',\r\n    //                     label: {\r\n    //                         formatter: '{b}:\\n{@[' + dimension + ']} ({d}%)'\r\n    //                     },\r\n    //                     encode: {\r\n    //                         value: dimension,\r\n    //                         tooltip: dimension\r\n    //                     }\r\n    //                 }\r\n    //             });\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <ReactECharts\r\n            echarts={echarts}\r\n            option={option}\r\n            className=\"page\"\r\n            ref={(e) => { echartsRef = e; }}\r\n            style={{ height: '90vh', width: '70vw' }}\r\n            // onEvents={onEvent}\r\n        />\r\n    );\r\n}\r\n\r\nexport default DataAnalysis;","import './css/MyApp.css';\r\nimport SideBar from './modules/SideBar';\r\nimport Uploader from './modules/Uploader';\r\n// import Page from './modules/Page';\r\n// import Jso from './modules/Jso';\r\nimport AliTable from './modules/AliTable';\r\nimport DataAnalysis from './modules/DataAnalysis';\r\nimport {\r\n    Route,\r\n    Switch,\r\n    BrowserRouter,\r\n} from 'react-router-dom';\r\nimport { MyContext } from './modules/context/MyContext';\r\nimport { useState } from 'react';\r\nimport { Alert } from 'antd';\r\n\r\nconst data = [\r\n    {\r\n        title: \"上传文件\",\r\n        path: \"/uploader\",\r\n        component: <Uploader />,\r\n    },\r\n    // {\r\n    //     title: \"扇形图分析\",\r\n    //     path: \"/fan\",\r\n    //     component: <Fan />,\r\n    // },\r\n    // {\r\n    //     title: \"折线图分析\",\r\n    //     path: \"/line\",\r\n    //     component: <Line />,\r\n    // },\r\n    // {\r\n    //     title: \"柱状图分析\",\r\n    //     path: \"/bar\",\r\n    //     component: <BarAnalysis />,\r\n    // },\r\n    {\r\n        title: \"表格预览\",\r\n        path: \"/ali-table\",\r\n        component: <AliTable />\r\n    },\r\n    // {\r\n    //     title: \"图表测试\",\r\n    //     path: \"/page\",\r\n    //     component: <Page />,\r\n    // },\r\n    // {\r\n    //     title: \"JSON测试\",\r\n    //     path: \"/json\",\r\n    //     component: <Jso />,\r\n    // },\r\n    {\r\n        title: \"数据分析\",\r\n        path: \"/data\",\r\n        component: <DataAnalysis />\r\n    }\r\n];\r\n\r\n\r\n\r\n// function Fan() {\r\n//     return (\r\n//         <div>This is fan.</div>\r\n//     );\r\n// }\r\n\r\n// function Line() {\r\n//     return (\r\n//         <div>This is line.</div>\r\n//     );\r\n// }\r\n\r\n// function Bar() {\r\n//     return (\r\n//         <div>This is bar.</div>\r\n//     );\r\n// }\r\n\r\nfunction MyApp() {\r\n\r\n    const origin_alert_left = \"15vw\";\r\n    const [primitiveData, setPrimitive] = useState();\r\n    const [alertMes, setAlertMes] = useState(\"未知错误\");\r\n    const [alertLeft, setAlertLeft] = useState(origin_alert_left);\r\n    const [alertType, setAlertType] = useState(\"error\");\r\n    const [alertOpacity, setAlertOpacity] = useState(0);\r\n    const [settledData, setSettledData] = useState([]);\r\n    const [col_hidden, setColHidden] = useState([]);\r\n    const [row_chosen, setRowChosen] = useState([]);\r\n\r\n    function showAlert(mes, type) {\r\n        setAlertType(type);\r\n        setAlertMes(mes);\r\n        setAlertOpacity(1);\r\n        setAlertLeft('20vw');\r\n        setTimeout(() => {\r\n            setAlertOpacity(0);\r\n            setAlertLeft(origin_alert_left);\r\n        }, 3000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"MyApp\">\r\n            <Alert\r\n                message={alertMes}\r\n                type={alertType}\r\n                showIcon\r\n                className=\"ali_table_alert\"\r\n                style={{\r\n                    left: alertLeft,\r\n                    opacity: alertOpacity\r\n                }}\r\n            />\r\n            <BrowserRouter basename=\"/shangchen0531.github.io\">\r\n                <SideBar data={data} />\r\n                <MyContext.Provider value={{\r\n                    primitiveData: primitiveData,\r\n                    setPrimitive: setPrimitive,\r\n                    showAlert: showAlert,\r\n                    settledData: settledData,\r\n                    setSettledData: setSettledData,\r\n                    col_hidden: col_hidden,\r\n                    setColHidden: setColHidden,\r\n                    row_chosen, setRowChosen\r\n                }}>\r\n                    <div className=\"site-content\">\r\n                        <Switch>\r\n                            {data.map(\r\n                                (item) =>\r\n                                    <Route key={item.path} path={item.path}>\r\n                                        {item.component}\r\n                                    </Route>\r\n                            )}\r\n                            <Route path=\"/\">\r\n                                <Uploader />\r\n                            </Route>\r\n                        </Switch>\r\n                    </div>\r\n                    {/* <footer className=\"site-footer\">\r\n                        备案号：xxxxx\r\n                    </footer> */}\r\n                </MyContext.Provider>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport MyApp from './my_app/MyApp';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <MyApp />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}